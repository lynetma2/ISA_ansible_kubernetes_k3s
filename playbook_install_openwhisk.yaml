- name: Install k3s on the server node
  hosts: servers
  tasks:
   - name: Ping my hosts
     ansible.builtin.ping:

   - name: Print message
     ansible.builtin.debug:
      msg: Hello world
  
   - name: Install k3s on Server Node
     shell:
      "curl -sfL https://get.k3s.io | sh -"
     become: true

   - name: Get k3s Server Token
     shell:
      "sudo cat /var/lib/rancher/k3s/server/node-token"
     become: true
     register: token

- name: Install k3s on the agent nodes
  hosts: agents
  tasks:
   - name: Ping my hosts
     ansible.builtin.ping:

   - name: Print message
     ansible.builtin.debug:
      msg: Hello world

   - name: Install k3s on Agent Nodes
     shell:
      cmd: "curl -sfL https://get.k3s.io | K3S_URL=https://{{hostvars['server']['ansible_default_ipv4']['address']}}:6443 K3S_TOKEN={{hostvars['server']['token'].stdout}} sh -"
     become: true

- name: Verify the installation
  hosts: servers
  tasks:
   - name: Check the status of teh installed k3s nodes
     shell:
      cmd: "sudo k3s kubectl get nodes"
     become: true
     register: status
  
   - name: Show status content
     debug:
      var: status.stdout

- name: Install OpenWhisk and wsk cli using helm
  hosts: servers
  tasks:
    - name: Install Helm
      shell:
        cmd: "sudo curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash"
      become: true
    
    - name: Fix permissions to k3s yaml
      shell:
        cmd: "sudo chmod 666 /etc/rancher/k3s/k3s.yaml"
      become: true

    - name: Download latest git source
      shell:
        cmd: "git clone https://github.com/apache/openwhisk-deploy-kube.git"
    
    - name: Install Openwhisk Helm Chart
      shell:
        cmd: "helm install my-openwhisk ~/openwhisk-deploy-kube/helm/openwhisk --namespace ow --create-namespace --set whisk.ingress.apiHostName={{hostvars['server']['ansible_default_ipv4']['address']}}"
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      register: ow_install
    
    - name: Show install stuff
      debug:
        var: ow_install.stdout
    
    - name: Download OpenWhisk CLI tool latest version (16/9)
      shell:
        cmd: "wget https://github.com/apache/openwhisk-cli/releases/download/1.2.0/OpenWhisk_CLI-1.2.0-linux-amd64.tgz"

    - name: unpack OpenWhisk CLI tool
      shell:
        cmd: "tar -xvzf OpenWhisk_CLI-1.2.0-linux-amd64.tgz -C /usr/bin"
      become: true
    
    - name: Set the OpenWhisk port
      shell:
        cmd: "wsk property set --apihost {{ow_install.stdout[ow_install.stdout.find(hostvars['server']['ansible_default_ipv4']['address']):][:ow_install.stdout[ow_install.stdout.find(hostvars['server']['ansible_default_ipv4']['address']):].find(\"\n\")]}}"

    - name: Set the OpenWhisk auth
      shell:
        cmd: "wsk property set --auth 23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP"
    
    - name: Transfer hello world javascript example
      copy:
        src: ./hello.js
        dest: ~/hello.js

    - name: Label the master nodes correctly inside of openwhisk
      shell:
        cmd: "kubectl label node master openwhisk-role=core"

    - name: Label the worker nodes correctly inside of openwhisk
      shell:
        cmd: "kubectl label node worker1 openwhisk-role=invoker"
    
    - name: Label the worker nodes correctly inside of openwhisk
      shell:
        cmd: "kubectl label node worker2 openwhisk-role=invoker"

    - name: Pause for 30 minutes to build network #Make this wait on the actual installation.
      ansible.builtin.pause:
        minutes: 15
     # #Down from here is creation of demo action. to test that it works

    
    - name: Create demo package
      shell:
        cmd: "wsk -i package create demo"
    
    - name: Create demo action
      shell:
        cmd: "wsk -i action create /guest/demo/hello hello.js --web true"

    - name: Get url of demo action
      shell:
        cmd: "wsk -i action get /guest/demo/hello --url"
      register: url
    
    - name: Print URL of basic action
      debug:
        var: url.stdout
    #TODO add the port to wsk to make sure everyhting works as supposed